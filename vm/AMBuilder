# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

Includes = [
  os.path.join(builder.currentSourcePath),
  os.path.join(builder.currentSourcePath, '..', 'third_party'),

  # The include path for SP v2 stuff.
  os.path.join(builder.sourcePath, 'sourcepawn', 'include'),
]

# Build the static library.
library = builder.compiler.StaticLibrary('sourcepawn')
library.compiler.includes += Includes
library.sources += [
  'api.cpp',
  'code-allocator.cpp',
  'code-stubs.cpp',
  'compiled-function.cpp',
  'environment.cpp',
  'file-utils.cpp',
  'md5/md5.cpp',
  'opcodes.cpp',
  'plugin-context.cpp',
  'plugin-runtime.cpp',
  'scripted-invoker.cpp',
  'stack-frames.cpp',
  'smx-v1-image.cpp',
  'watchdog_timer.cpp',
  'x86/assembler-x86.cpp',
  'x86/code-stubs-x86.cpp',
  'x86/jit_x86.cpp',
  'x86/x86-utils.cpp',
  '../third_party/zlib/adler32.c',
  '../third_party/zlib/compress.c',
  '../third_party/zlib/crc32.c',
  '../third_party/zlib/deflate.c',
  '../third_party/zlib/gzio.c',
  '../third_party/zlib/infback.c',
  '../third_party/zlib/inffast.c',
  '../third_party/zlib/inflate.c',
  '../third_party/zlib/inftrees.c',
  '../third_party/zlib/trees.c',
  '../third_party/zlib/uncompr.c',
  '../third_party/zlib/zutil.c',
]
libsourcepawn = builder.Add(library).binary

# Build the dynamically-linked library.
dll = Root.Library(builder, 'sourcepawn.jit.x86')
dll.compiler.includes += Includes
dll.compiler.linkflags[0:0] = [libsourcepawn]
dll.sources += [
  'dll_exports.cpp'
]

if builder.target_platform == 'linux':
  dll.compiler.postlink += ['-lpthread', '-lrt']

Root.binaries += [builder.Add(dll)]

# Build the debug shell.
shell = Root.Program(builder, 'spshell')
shell.compiler.includes += Includes
shell.compiler.defines += ['SPSHELL']
shell.compiler.linkflags[0:0] = [libsourcepawn]
shell.sources += [
  'dll_exports.cpp'
]

if builder.target_platform == 'linux':
  shell.compiler.postlink += ['-lpthread', '-lrt']
builder.Add(shell)
